separate(cod_mun,
into = c("codigo_ccaa", "codigo_provincia", "codigo_municipio"),
sep = "-")
# En la tabla surveys (encuestas) hacemos una columna partido, muy simliar al primero de elecciones, además quitamos los partidos que no tienen importancia en la encuesta, es decir q ue no han recibido datos
surveys_tidy <- surveys |>
pivot_longer(cols = -c(type_survey:turnout), names_to = "Partido", values_to = "value") |> drop_na("value")
# Debes descartar las encuestas que:
# se refieran a elecciones anteriores a 2008
# sean a pie de urna
# tamaño muestral desconocido o inferior a 500.
# tenga 1 día o menos de trabajo de campo.
# Convertir las columnas de fecha a formato Date
surveys_clean <- surveys_tidy |>
mutate(
date_elec = ymd(date_elec),
field_date_from = ymd(field_date_from),
field_date_to = ymd(field_date_to),
field_duration = as.numeric(field_date_to - field_date_from)
)
# Filtrar la base de datos según las condiciones
surveys_clean <- surveys_clean |>
filter(
date_elec >= "2008-01-01",
exit_poll == FALSE,
!is.na(size) & size >= 500,
field_duration > 1
)
########################################################
library(dplyr)
# Filtrar municipios grandes y analizar por año
resultados_grandes_municipios <- datos_elecciones %>%
# Filtrar solo municipios con más de 100,000 habitantes
filter(censo > 100000) %>%
# Agrupar por año
group_by(anno) %>%
# Sumar los votos de cada partido por año
summarise(across(all_of(partidos_cols), sum, na.rm = TRUE)) %>%
ungroup()
View(election_tidy_with_siglas)
# Filtrar municipios grandes y analizar por año
resultados_grandes_municipios <- election_tidy_with_siglas  |>
filter(censo > 100000) |>
group_by(anno, siglas) |>
# Sumar los votos
summarise(total_votos = sum(votos, na.rm = TRUE)) |>
# Para cada año, encontrar el partido con más votos
group_by(anno) %>%
slice_max(order_by = total_votos, n = 1)
View(resultados_grandes_municipios)
resultados_grandes_municipios <- election_tidy_with_siglas  |>
filter(censo > 100000) |>
group_by(anno, partido) |>
summarise(total_votos = sum(votos, na.rm = TRUE)) |>
group_by(anno,siglas) |>
slice_max(order_by = total_votos, n = 1)
resultados_grandes_municipios <- election_tidy_with_siglas  |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(total_votos = sum(votos, na.rm = TRUE)) |>
group_by(anno,siglas) |>
slice_max(order_by = total_votos, n = 1)
resultados_grandes_municipios <- election_tidy_with_siglas  |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(total_votos = sum(votos, na.rm = TRUE)) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1)
# Filtrar municipios grandes y analizar por año
resultados_grandes_municipios <- election_tidy_with_siglas  |>
filter(censo > 100000) |>
group_by(anno, siglas) |>
summarise(total_votos = sum(votos, na.rm = TRUE)) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1)
# Filtrar municipios grandes y analizar por año
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"  # Esto elimina el warning
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()  # Eliminar todos los grupos al final
# Filtrar municipios grandes y analizar por año
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, siglas) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"  # Esto elimina el warning
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()  # Eliminar todos los grupos al final
View(resultados_grandes_municipios)
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, siglas) |>
summarise(
total_votos = sum(votos, na.rm = TRUE)
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, siglas) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()
View(election_data)
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()
View(resultados_grandes_municipios)
resultados_top2 <- election_tidy_with_siglas
filter(censo > 100000) |>
group_by(anno, partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(partido, total_votos),
names_prefix = c("partido_", "votos_")
)
View(election_tidy_with_siglas)
# Pasamos la tabla de elecciones a tidy, hacemos una columna partido
election_tidy <- election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas), names_to = "Partido", values_to = "votos") |> drop_na("votos")
# Agrupar varios partidos a la misma sigla
abbrev_g<-abbrev |>
mutate(siglas=case_when(
str_detect(denominacion, "PARTIDO SOCIALISTA|PSOE") ~ "PSOE",
str_detect(denominacion, "PARTIDO POPULAR") ~ "PP",
str_detect(denominacion, "CIUDADANOS-PARTIDO DE LA CIUDADANÍA|CIUDADANOS-PARTIDO DE LA CIUDADANIA") ~ "C's",
str_detect(denominacion, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(denominacion, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(denominacion, "CONVERGENCIA i UNIO|CONVERGENCIA I UNIO") ~ "CIU",
str_detect(denominacion, "UNIDAS PODEMOS|PODEM|EZKER BATUA|IZQUIERDA UNIDA") ~ "UP",
str_detect(denominacion, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
str_detect(denominacion, "SORTU|EUSKO|ALkARTASUNA|ARALAR|ALTERNATIBA") ~ "EH-BILDU",
str_detect(denominacion, "MÁS PAÍS") ~ "MP",
str_detect(denominacion, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Hacemos que si un partido tienen asiganda varias abreviaturas se quede con la primera
siglas_unique <- abbrev_g |>
distinct(denominacion, .keep_all = TRUE)
# UNimos elecciones con abreaviaturas, para que en elecciones salga la abrevaitura de cada partido
election_tidy_with_siglas <- election_tidy |>
left_join(siglas_unique,
by = c("Partido" = "denominacion"))
# Separamos cod_mun en las 3 varibales de comunidad autonoma, provincia y municipio, para que coincidan con las de la tabla elecciones
cod_mun <- cod_mun |>
separate(cod_mun,
into = c("codigo_ccaa", "codigo_provincia", "codigo_municipio"),
sep = "-")
# Pasamos la tabla de elecciones a tidy, hacemos una columna partido
election_tidy <- election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas), names_to = "Partido", values_to = "votos") |> drop_na("votos")
# Agrupar varios partidos a la misma sigla
abbrev_g<-abbrev |>
mutate(siglas=case_when(
str_detect(denominacion, "PARTIDO SOCIALISTA|PSOE") ~ "PSOE",
str_detect(denominacion, "PARTIDO POPULAR") ~ "PP",
str_detect(denominacion, "CIUDADANOS-PARTIDO DE LA CIUDADANÍA|CIUDADANOS-PARTIDO DE LA CIUDADANIA") ~ "C's",
str_detect(denominacion, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(denominacion, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(denominacion, "CONVERGENCIA i UNIO|CONVERGENCIA I UNIO") ~ "CIU",
str_detect(denominacion, "UNIDAS PODEMOS|PODEM|EZKER BATUA|IZQUIERDA UNIDA") ~ "UP",
str_detect(denominacion, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
str_detect(denominacion, "SORTU|EUSKO|ALkARTASUNA|ARALAR|ALTERNATIBA") ~ "EH-BILDU",
str_detect(denominacion, "MÁS PAÍS") ~ "MP",
str_detect(denominacion, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Hacemos que si un partido tienen asiganda varias abreviaturas se quede con la primera
siglas_unique <- abbrev_g |>
distinct(denominacion, .keep_all = TRUE)
# UNimos elecciones con abreaviaturas, para que en elecciones salga la abrevaitura de cada partido
election_tidy_with_siglas <- election_tidy |>
left_join(siglas_unique,
by = c("Partido" = "denominacion"))
# Separamos cod_mun en las 3 varibales de comunidad autonoma, provincia y municipio, para que coincidan con las de la tabla elecciones
cod_mun <- cod_mun |>
separate(cod_mun,
into = c("codigo_ccaa", "codigo_provincia", "codigo_municipio"),
sep = "-")
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
# Pasamos la tabla de elecciones a tidy, hacemos una columna partido
election_tidy <- election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas), names_to = "Partido", values_to = "votos") |> drop_na("votos")
# Agrupar varios partidos a la misma sigla
abbrev_g<-abbrev |>
mutate(siglas=case_when(
str_detect(denominacion, "PARTIDO SOCIALISTA|PSOE") ~ "PSOE",
str_detect(denominacion, "PARTIDO POPULAR") ~ "PP",
str_detect(denominacion, "CIUDADANOS-PARTIDO DE LA CIUDADANÍA|CIUDADANOS-PARTIDO DE LA CIUDADANIA") ~ "C's",
str_detect(denominacion, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(denominacion, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(denominacion, "CONVERGENCIA i UNIO|CONVERGENCIA I UNIO") ~ "CIU",
str_detect(denominacion, "UNIDAS PODEMOS|PODEM|EZKER BATUA|IZQUIERDA UNIDA") ~ "UP",
str_detect(denominacion, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
str_detect(denominacion, "SORTU|EUSKO|ALkARTASUNA|ARALAR|ALTERNATIBA") ~ "EH-BILDU",
str_detect(denominacion, "MÁS PAÍS") ~ "MP",
str_detect(denominacion, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Hacemos que si un partido tienen asiganda varias abreviaturas se quede con la primera
siglas_unique <- abbrev_g |>
distinct(denominacion, .keep_all = TRUE)
# UNimos elecciones con abreaviaturas, para que en elecciones salga la abrevaitura de cada partido
election_tidy_with_siglas <- election_tidy |>
left_join(siglas_unique,
by = c("Partido" = "denominacion"))
# Separamos cod_mun en las 3 varibales de comunidad autonoma, provincia y municipio, para que coincidan con las de la tabla elecciones
cod_mun <- cod_mun |>
separate(cod_mun,
into = c("codigo_ccaa", "codigo_provincia", "codigo_municipio"),
sep = "-")
# En la tabla surveys (encuestas) hacemos una columna partido, muy simliar al primero de elecciones, además quitamos los partidos que no tienen importancia en la encuesta, es decir q ue no han recibido datos
surveys_tidy <- surveys |>
pivot_longer(cols = -c(type_survey:turnout), names_to = "Partido", values_to = "value") |> drop_na("value")
# Debes descartar las encuestas que:
# se refieran a elecciones anteriores a 2008
# sean a pie de urna
# tamaño muestral desconocido o inferior a 500.
# tenga 1 día o menos de trabajo de campo.
# Convertir las columnas de fecha a formato Date
surveys_clean <- surveys_tidy |>
mutate(
date_elec = ymd(date_elec),
field_date_from = ymd(field_date_from),
field_date_to = ymd(field_date_to),
field_duration = as.numeric(field_date_to - field_date_from)
)
# Filtrar la base de datos según las condiciones
surveys_clean <- surveys_clean |>
filter(
date_elec >= "2008-01-01",
exit_poll == FALSE,
!is.na(size) & size >= 500,
field_duration > 1
)
# 12:
# a) ¿Qué partido fue el ganador en los municipios con más de 100.000 habitantes (censo) en cada una de las elecciones?
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()
# b) ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuando el primero fue el PP?
# Obtener los dos primeros partidos por año
resultados_top2 <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(partido, total_votos),
names_prefix = c("partido_", "votos_")
)
resultados_top2 <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(partido, total_votos),
names_prefix = c("partido_", "votos_")
)
resultados_top2 <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(Partido, total_votos),
names_prefix = c("partido_", "votos_")
)
resultados_top2 <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(Partido, total_votos)
)
View(resultados_top2)
crecimiento_partido <- function(election_tidy) {
# Calcular los votos totales por partido y año
votos_agrupados <- election_tidy |>
group_by(anno, Partido) |>
summarise(total_votos = sum(votos, na.rm = TRUE), .groups = "drop")
# Ordenar los datos por partido y año
votos_ordenados <- votos_agrupados |>
arrange(Partido, anno)
# Calcular el crecimiento o disminución porcentual entre elecciones consecutivas
# Usamos lag() para obtener los votos del año anterior
# En las elecciones en las que un determinado partido aparece por primera vez, el cambio
# porcentual es 0
crecimiento <- votos_ordenados |>
group_by(Partido) |>
mutate(cambio_pct = ifelse(is.na(lag(total_votos)), 0, (total_votos - lag(total_votos)) / lag(total_votos) * 100)) |>
ungroup()
return(crecimiento)
}
View(crecimiento_partido)
View(surveys_clean)
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglas) |>
summarise(total_votes = sum(votos, na.rm = TRUE)) |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100)
# Calcular el porcentaje de intención de voto por partido en las encuestas
survey_percentage <- surveys_clean |>
group_by(date_elec, Partido) |>
summarise(mean_intention = mean(value, na.rm = TRUE)) |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100)
# Unir ambas tablas por año y partido
# Convertir la columna date_elec a año en formato entero
survey_percentage <- survey_percentage |>
mutate(date_elec = year(date_elec))
# Reintentar la unión y cálculo del error
error_calibration <- votes_percentage  |>
inner_join(survey_percentage, by = c("anno" = "date_elec", "siglas" = "Partido")) |>
mutate(error = abs(percentage_votes - percentage_intention))
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglas) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Calcular el porcentaje de intención de voto por partido en las encuestas
survey_percentage <- surveys_clean |>
mutate(date_elec = year(date_elec)) |>
group_by(date_elec, Partido) |>
summarise(mean_intention = mean(value, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
ungroup()
# Unir ambas tablas y calcular el error
error_calibration <- votes_percentage |>
inner_join(survey_percentage, by = c("anno" = "date_elec", "siglas" = "Partido")) |>
mutate(error = abs(percentage_votes - percentage_intention))
View(error_calibration)
# Agrupar varios partidos a la misma sigla
surveys_clean_siglas <- surveys_clean |>
mutate(Partido=case_when(
str_detect(denominacion, "PSOE") ~ "PSOE",
str_detect(denominacion, "PP") ~ "PP",
str_detect(denominacion, "C's") ~ "C's",
str_detect(denominacion, "PNV") ~ "PNV",
str_detect(denominacion, "BNGO") ~ "BNG",
str_detect(denominacion, "CIU") ~ "CIU",
str_detect(denominacion, "UP") ~ "UP",
str_detect(denominacion, "ERC") ~ "ERC",
str_detect(denominacion, "EH-BILDU") ~ "EH-BILDU",
str_detect(denominacion, "MP") ~ "MP",
str_detect(denominacion, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Agrupar varios partidos a la misma sigla
surveys_clean_siglas <- surveys_clean |>
mutate(Partido=case_when(
str_detect(Partido, "PSOE") ~ "PSOE",
str_detect(Partido, "PP") ~ "PP",
str_detect(Partido, "C's") ~ "C's",
str_detect(Partido, "PNV") ~ "PNV",
str_detect(Partido, "BNGO") ~ "BNG",
str_detect(Partido, "CIU") ~ "CIU",
str_detect(Partido, "UP") ~ "UP",
str_detect(Partido, "ERC") ~ "ERC",
str_detect(Partido, "EH-BILDU") ~ "EH-BILDU",
str_detect(Partido, "MP") ~ "MP",
str_detect(Partido, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, Partidos) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Agrupar varios partidos a la misma sigla
surveys_clean_siglas <- surveys_clean |>
mutate(Partido=case_when(
str_detect(Partido, "PSOE") ~ "PSOE",
str_detect(Partido, "PP") ~ "PP",
str_detect(Partido, "C's") ~ "C's",
str_detect(Partido, "PNV") ~ "PNV",
str_detect(Partido, "BNGO") ~ "BNG",
str_detect(Partido, "CIU") ~ "CIU",
str_detect(Partido, "UP") ~ "UP",
str_detect(Partido, "ERC") ~ "ERC",
str_detect(Partido, "EH-BILDU") ~ "EH-BILDU",
str_detect(Partido, "MP") ~ "MP",
str_detect(Partido, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglass) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglas) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Calcular el porcentaje de intención de voto por partido en las encuestas
survey_percentage <- surveys_clean_siglas |>
mutate(date_elec = year(date_elec)) |>
group_by(date_elec, Partido) |>
summarise(mean_intention = mean(value, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
ungroup()
# Unir ambas tablas y calcular el error
error_calibration <- votes_percentage |>
inner_join(survey_percentage, by = c("anno" = "date_elec", "siglas" = "Partido")) |>
mutate(error = abs(percentage_votes - percentage_intention))
# ¿Cómo calibrar el error de las encuestas (recordemos que las encuestas son de intención de voto a nivel nacional)?
# Agrupar varios partidos a la misma sigla
surveys_clean_siglas <- surveys_clean |>
mutate(Partido=case_when(
str_detect(Partido, "PSOE") ~ "PSOE",
str_detect(Partido, "PP") ~ "PP",
str_detect(Partido, "C's") ~ "C's",
str_detect(Partido, "PNV") ~ "PNV",
str_detect(Partido, "BNGO") ~ "BNG",
str_detect(Partido, "CIU") ~ "CIU",
str_detect(Partido, "UP") ~ "UP",
str_detect(Partido, "ERC") ~ "ERC",
str_detect(Partido, "EH-BILDU") ~ "EH-BILDU",
str_detect(Partido, "MP") ~ "MP",
str_detect(Partido, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglas) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Calcular el porcentaje de intención de voto por partido en las encuestas
survey_percentage <- surveys_clean_siglas |>
mutate(date_elec = year(date_elec)) |>
group_by(date_elec, Partido) |>
summarise(mean_intention = mean(value, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
ungroup()
# Unir ambas tablas y calcular el error
error_calibration <- votes_percentage |>
inner_join(survey_percentage, by = c("anno" = "date_elec", "siglas" = "Partido")) |>
mutate(error = abs(percentage_votes - percentage_intention))
View(error_calibration)
