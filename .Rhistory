<<<<<<< HEAD
<<<<<<< Updated upstream
=======
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "white",
fontface = "bold"
) +
>>>>>>> Stashed changes
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
<<<<<<< Updated upstream
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
=======
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
>>>>>>> Stashed changes
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
<<<<<<< Updated upstream
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
=======
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "white",
>>>>>>> Stashed changes
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
<<<<<<< Updated upstream
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
=======
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
>>>>>>> Stashed changes
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
<<<<<<< Updated upstream
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
=======
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
>>>>>>> Stashed changes
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
<<<<<<< Updated upstream
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
=======
data = mapa_fragmentacion |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "white",
>>>>>>> Stashed changes
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
<<<<<<< Updated upstream
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
coord_sf(datum = NA) +
theme_minimal() +
=======
ggplot(election_data |> filter(anno==2019))+
geom_sf(aes(alpha=censo, fill=censo), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(election_data$censo), transform = "log",labels = scales::label_number(scale = 1, accuracy = 1))+
labs(title = "CENSO EN ARAGON Y CATALUÑA")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
g_cen<-ggplot(mapa_indice)+
geom_sf(aes(alpha=censo, fill=censo), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(election_data$censo), transform = "log",labels = scales::label_number(scale = 1, accuracy = 1))+
labs(title = "CENSO EN ARAGON Y CATALUÑA")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
g_ind<-ggplot(mapa_indice)+
geom_sf(aes(alpha=indice, fill=indice), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(indice$indice), labels = scales::label_number(scale = 100, suffix="%"))+
labs(fill="PARTICIPACION",
title = "VOTOS/CENSO EN ARAGON Y CATALUÑA")+
theme_minimal()+
>>>>>>> fa6006c4769fd1dea60119d9eb8d34144721a5be
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
votos_censo<-g_ind+g_cen   #Sumamos las graficas para compararlas
print(votos_censo)
g_ind<-ggplot(mapa_indice)+
geom_sf(aes(alpha=indice, fill=indice), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(indice$indice), labels = scales::label_number(scale = 100, suffix="%"))+
labs(fill="PARTICIPACION",
title = "PARTICIPACION 2019")+
theme_minimal()+
theme(
<<<<<<< HEAD
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
>>>>>>> Stashed changes
=======
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
=======
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
>>>>>>> Stashed changes
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
<<<<<<< Updated upstream
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
=======
data = mapa_fragmentacion_ccaa |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "white",
>>>>>>> Stashed changes
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
<<<<<<< Updated upstream
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
=======
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
>>>>>>> Stashed changes
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
<<<<<<< Updated upstream
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
=======
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
>>>>>>> Stashed changes
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
<<<<<<< Updated upstream
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
coord_sf(datum = NA) +
theme_minimal() +
=======
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
g_cen<-ggplot(mapa_indice)+
geom_sf(aes(alpha=censo, fill=censo), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(election_data$censo), transform = "log",labels = scales::label_number(scale = 1, accuracy = 1))+
labs(title = "CENSO EN 2019")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
votos_censo<-g_ind+g_cen   #Sumamos las graficas para compararlas
print(votos_censo)
#Mendoza
#Relación entre el censo y el voto mediante un mapa:
library(patchwork)
indice <- election_data|>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
drop_na(votos_candidaturas, censo) |>
mutate("indice" = votos_candidaturas / censo)
mapa<-mapSpain::esp_get_munic() |>
mutate("key"=glue("{cpro}-{cmun}"))
mapa_indice<- mapa |>
left_join(indice, by="key")
g_ind<-ggplot(mapa_indice)+
geom_sf(aes(alpha=indice, fill=indice), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(indice$indice), labels = scales::label_number(scale = 100, suffix="%"))+
labs(fill="PARTICIPACION",
title = "PARTICIPACION 2019")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
g_cen<-ggplot(mapa_indice)+
geom_sf(aes(alpha=censo, fill=censo), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(election_data$censo), transform = "log",labels = scales::label_number(scale = 1, accuracy = 1))+
labs(title = "CENSO EN 2019")+
theme_minimal()+
>>>>>>> fa6006c4769fd1dea60119d9eb8d34144721a5be
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
votos_censo<-g_ind+g_cen   #Sumamos las graficas para compararlas
print(votos_censo)
colores_partidos <- c(
"PSOE" = "#E30000",
"PP" = "#0000FF",
"C's" = "#FF6600",
"PNV" = "#006747",
"BNG" = "#0C6F6D",
"CIU" = "#9C3D28",
"UP" = "#6A0DAD",
"ERC" = "#E24D3A",
"EH-BILDU" = "#006F6F",
"MP" = "#00CFFF",
"VOX" = "#008000",
"OTROS" = "#BEBEBE"
)
ganadores_mun<-election_tidy_with_participation |>
mutate("key"=glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
slice_max(votos)
ganadores_mun<- ganadores_mun |>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
<<<<<<< HEAD
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
>>>>>>> Stashed changes
# ¿Qué 10 partidos obtuvieron mejores resultados en comparación con las predicciones de las encuestas?
comparativa_partidos <- surveys_clean_siglas |>
mutate(anno = year(date_elec)) |>
group_by(anno, Partido) |>
summarise(
mean_intention = mean(value, na.rm = TRUE),
.groups = "drop"
) |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
inner_join(votes_percentage, by = c("anno", "Partido" = "siglas")) |>
mutate(diferencia = percentage_votes - percentage_intention) |>
arrange(desc(diferencia)) |>
slice_max(order_by = diferencia, n = 10)
rm(list = ls())
library(tidyverse)
library(glue)
library(lubridate)
library(forcats)
rm(list = ls())
library(tidyverse)
library(glue)
library(lubridate)
library(forcats)
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
# Pasamos la tabla de elecciones a tidy, hacemos una columna partido
election_tidy <- election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas), names_to = "Partido", values_to = "votos") |> drop_na("votos")
# Agrupar varios partidos a la misma sigla
abbrev_g<-abbrev |>
mutate(siglas=case_when(
str_detect(denominacion, "PARTIDO SOCIALISTA|PSOE") ~ "PSOE",
str_detect(denominacion, "PARTIDO POPULAR") ~ "PP",
str_detect(denominacion, "CIUDADANOS-PARTIDO DE LA CIUDADANÍA|CIUDADANOS-PARTIDO DE LA CIUDADANIA") ~ "C's",
str_detect(denominacion, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(denominacion, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(denominacion, "CONVERGENCIA i UNIO|CONVERGENCIA I UNIO") ~ "CIU",
str_detect(denominacion, "UNIDAS PODEMOS|PODEM|EZKER BATUA|IZQUIERDA UNIDA") ~ "UP",
str_detect(denominacion, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
str_detect(denominacion, "SORTU|EUSKO|ALkARTASUNA|ARALAR|ALTERNATIBA") ~ "EH-BILDU",
str_detect(denominacion, "MÁS PAÍS") ~ "MP",
str_detect(denominacion, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Hacemos que si un partido tienen asiganda varias abreviaturas se quede con la primera
siglas_unique <- abbrev_g |>
distinct(denominacion, .keep_all = TRUE)
# UNimos elecciones con abreaviaturas, para que en elecciones salga la abrevaitura de cada partido
election_tidy_with_siglas <- election_tidy |>
left_join(siglas_unique,
by = c("Partido" = "denominacion"))
# Separamos cod_mun en las 3 varibales de comunidad autonoma, provincia y municipio, para que coincidan con las de la tabla elecciones
cod_mun <- cod_mun |>
separate(cod_mun,
into = c("codigo_ccaa", "codigo_provincia", "codigo_municipio"),
sep = "-")
# En la tabla surveys (encuestas) hacemos una columna partido, muy simliar al primero de elecciones, además quitamos los partidos que no tienen importancia en la encuesta, es decir q ue no han recibido datos
surveys_tidy <- surveys |>
pivot_longer(cols = -c(type_survey:turnout), names_to = "Partido", values_to = "value") |>
filter(year(date_elec) >= 2008 & year(date_elec) <= 2019) |>
drop_na("value")
# Debes descartar las encuestas que:
# se refieran a elecciones anteriores a 2008
# sean a pie de urna
# tamaño muestral desconocido o inferior a 500.
# tenga 1 día o menos de trabajo de campo.
# Convertir las columnas de fecha a formato Date
surveys_clean <- surveys_tidy |>
mutate(
date_elec = ymd(date_elec),
field_date_from = ymd(field_date_from),
field_date_to = ymd(field_date_to),
field_duration = as.numeric(field_date_to - field_date_from)
=======
>>>>>>> Stashed changes
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "white",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
<<<<<<< Updated upstream
# 12:
# a) ¿Qué partido fue el ganador en los municipios con más de 100.000 habitantes (censo) en cada una de las elecciones?
resultados_grandes_municipios <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 1) |>
ungroup()
# b) ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuando el primero fue el PP?
# Obtener los dos primeros partidos por año
resultados_top2 <- election_tidy_with_siglas |>
filter(censo > 100000) |>
group_by(anno, Partido) |>
summarise(
total_votos = sum(votos, na.rm = TRUE),
.groups = "drop"
) |>
group_by(anno) |>
slice_max(order_by = total_votos, n = 2) |>
arrange(anno, desc(total_votos)) |>
mutate(posicion = row_number()) |>
pivot_wider(
names_from = posicion,
values_from = c(Partido, total_votos)
)
crecimiento_partido <- function(election_tidy) {
# Calcular los votos totales por partido y año
votos_agrupados <- election_tidy |>
group_by(anno, Partido) |>
summarise(total_votos = sum(votos, na.rm = TRUE), .groups = "drop")
# Ordenar los datos por partido y año
votos_ordenados <- votos_agrupados |>
arrange(Partido, anno)
# Calcular el crecimiento o disminución porcentual entre elecciones consecutivas
# Usamos lag() para obtener los votos del año anterior
# En las elecciones en las que un determinado partido aparece por primera vez, el cambio
# porcentual es 0
crecimiento <- votos_ordenados |>
group_by(Partido) |>
mutate(cambio_pct = ifelse(is.na(lag(total_votos)), 0, (total_votos - lag(total_votos)) / lag(total_votos) * 100)) |>
ungroup()
return(crecimiento)
}
###############################################################################
# ¿Cómo calibrar el error de las encuestas (recordemos que las encuestas son de intención de voto a nivel nacional)?
# Agrupar varios partidos a la misma sigla
surveys_clean_siglas <- surveys_clean |>
mutate(Partido=case_when(
str_detect(Partido, "PSOE") ~ "PSOE",
str_detect(Partido, "PP") ~ "PP",
str_detect(Partido, "C's") ~ "C's",
str_detect(Partido, "PNV") ~ "PNV",
str_detect(Partido, "BNGO") ~ "BNG",
str_detect(Partido, "CIU") ~ "CIU",
str_detect(Partido, "UP") ~ "UP",
str_detect(Partido, "ERC") ~ "ERC",
str_detect(Partido, "EH-BILDU") ~ "EH-BILDU",
str_detect(Partido, "MP") ~ "MP",
str_detect(Partido, "VOX") ~ "VOX",
TRUE ~ "OTROS",
))
# Calcular el porcentaje de votos por partido en las elecciones
votes_percentage <- election_tidy_with_siglas |>
group_by(anno, siglas) |>
summarise(total_votes = sum(votos, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_votes = total_votes / sum(total_votes) * 100) |>
ungroup()
# Calcular el porcentaje de intención de voto por partido en las encuestas
survey_percentage <- surveys_clean_siglas |>
mutate(date_elec = year(date_elec)) |>
group_by(date_elec, Partido) |>
summarise(mean_intention = mean(value, na.rm = TRUE), .groups = "drop_last") |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
ungroup()
# Unir ambas tablas y calcular el error
error_calibration <- votes_percentage |>
inner_join(survey_percentage, by = c("anno" = "date_elec", "siglas" = "Partido")) |>
mutate(error = abs(percentage_votes - percentage_intention))
#####################################################################################
# ¿Qué casas encuestadoras acertaron más y cuáles se desviaron más de los resultados?
# Calcular el porcentaje de error por casa encuestadora
media_errors <- surveys_clean_siglas |>
mutate(anno = year(date_elec)) |>
group_by(anno, Partido, media) |>
summarise(
mean_intention = mean(value, na.rm = TRUE),
.groups = "drop"
) |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
inner_join(votes_percentage, by = c("anno", "Partido" = "siglas")) |>
mutate(error = abs(percentage_votes - percentage_intention))
# Calcular el error promedio por casa encuestadora
accuracy_by_media <- media_errors |>
group_by(media) |>
summarise(
mean_error = mean(error, na.rm = TRUE),
.groups = "drop"
) |>
arrange(mean_error)
# Identificar las casas encuestadoras más acertadas y más desviadas
medios_mas_acertados <- accuracy_by_media |> slice_min(order_by = mean_error, n = 5)
medios_menos_acertados <- accuracy_by_media |> slice_max(order_by = mean_error, n = 5)
## Ejercicios extras Marcos:
# ¿Qué 10 partidos obtuvieron mejores resultados en comparación con las predicciones de las encuestas?
comparativa_partidos <- surveys_clean_siglas |>
mutate(anno = year(date_elec)) |>
group_by(anno, Partido) |>
summarise(
mean_intention = mean(value, na.rm = TRUE),
.groups = "drop"
) |>
mutate(percentage_intention = mean_intention / sum(mean_intention) * 100) |>
inner_join(votes_percentage, by = c("anno", "Partido" = "siglas")) |>
mutate(diferencia = percentage_votes - percentage_intention) |>
arrange(desc(diferencia)) |>
slice_max(order_by = diferencia, n = 10)
# ¿Cuál es la relación entre el tamaño del censo y la fragmentación del voto (índice de Herfindahl)? Representar los valores de fragmentación en un mapa por comunidades autonomas.
library(mapSpain)
library(ggplot2)
library(dplyr)
election_tidy_with_siglas <- election_tidy_with_siglas |>
mutate(codigo_ccaa = substr(codigo_ccaa, 1, 2))
fragmentacion_ccaa <- election_tidy_with_siglas |>
group_by(codigo_ccaa, Partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), censo_total = sum(censo, na.rm = TRUE), .groups = "drop") |>
group_by(codigo_ccaa) |>
reframe(
indice_herfindahl = sum((votos_totales / sum(votos_totales, na.rm = TRUE))^2, na.rm = TRUE),
censo_total = unique(censo_total)
)
mapa_ccaa <- mapSpain::esp_get_ccaa()
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
coord_sf(datum = NA) +
theme_minimal() +
=======
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ganadores_mun<-election_tidy_with_participation |>
mutate("key"=glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<- ganadores_mun |>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
>>>>>>> fa6006c4769fd1dea60119d9eb8d34144721a5be
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ggplot(ganadores_mun |> filter(!is.na(y) & y != 0))+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ganadores_mun<-election_tidy_with_participation |>
filter(anno=2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno=2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key,anno) |>
drop_na(votos) |>
slice_max(votos)|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")+
facet_wrap(~anno)
ganadores_mun<-election_tidy_with_siglas |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key,anno) |>
drop_na(votos) |>
slice_max(votos)|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ganadores_mun<-election_tidy_with_siglas |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key,anno) |>
drop_na(votos) |>
slice_max(votos)|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ganadores_mun<- ganadores_mun |>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
anadores_mun<- ganadores_mun |>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
= colores_partidos)+
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019)
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS 2019",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
View(election_tidy_with_siglas)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019)
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019)
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS 2019",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
#Mendoza
#Relación entre el censo y el voto mediante un mapa:
library(patchwork)
indice <- election_data|>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
drop_na(votos_candidaturas, censo) |>
mutate("indice" = votos_candidaturas / censo)
mapa<-mapSpain::esp_get_munic() |>
mutate("key"=glue("{cpro}-{cmun}"))
mapa_indice<- mapa |>
left_join(indice, by="key")
#Grafico de la participacion
g_ind<-ggplot(mapa_indice)+
geom_sf(aes(alpha=indice, fill=indice), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(indice$indice), labels = scales::label_number(scale = 100, suffix="%"))+
labs(fill="PARTICIPACION",
title = "PARTICIPACION 2019")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
#Grafico del censo de España
g_cen<-ggplot(mapa_indice)+
geom_sf(aes(alpha=censo, fill=censo), color=NA)+
scale_alpha_continuous(range = c(0.7,0.9))+
scale_fill_gradient2(low = "#b9feff",mid="#00c9ff", high = "#040b64", midpoint =
mean(election_data$censo), transform = "log",labels = scales::label_number(scale = 1, accuracy = 1))+
labs(title = "CENSO EN 2019")+
theme_minimal()+
theme(
axis.text = element_blank(),  # Eliminar etiquetas de los ejes
axis.ticks = element_blank(),  # Eliminar marcas de los ejes
legend.position = "bottom",  # Colocar la leyenda abajo
legend.title = element_text(face = "bold", size = 12),  # Estilo de título de la leyenda
legend.text = element_text(size = 8, angle = 30),  # Estilo de texto de la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5) # Estilo del subtítulo
)+
guides(alpha = "none")
votos_censo<-g_ind+g_cen   #Sumamos las graficas para compararlas
print(votos_censo)
colores_partidos <- c(
"PSOE" = "#E30000",
"PP" = "#0000FF",
"C's" = "#FF6600",
"PNV" = "#006747",
"BNG" = "#0C6F6D",
"CIU" = "#9C3D28",
"UP" = "#6A0DAD",
"ERC" = "#E24D3A",
"EH-BILDU" = "#006F6F",
"MP" = "#00CFFF",
"VOX" = "#008000",
"OTROS" = "#BEBEBE"
)
<<<<<<< HEAD
=======
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
library(sf)
# Obtener el mapa de CCAA y transformarlo a una proyección más adecuada
mapa_ccaa <- mapSpain::esp_get_ccaa()  |>
st_transform(3857)  # Proyección Web Mercator
# Resto del código permanece igual
election_tidy_with_siglas <- election_tidy_with_siglas |>
mutate(codigo_ccaa = substr(codigo_ccaa, 1, 2))
fragmentacion_ccaa <- election_tidy_with_siglas |>
group_by(codigo_ccaa, Partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE),
censo_total = sum(censo, na.rm = TRUE),
.groups = "drop") |>
group_by(codigo_ccaa) |>
reframe(
indice_herfindahl = sum((votos_totales / sum(votos_totales, na.rm = TRUE))^2, na.rm = TRUE),
censo_total = unique(censo_total)
)
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
# Resto del código permanece igual
election_tidy_with_siglas <- election_tidy_with_siglas |>
mutate(codigo_ccaa = substr(codigo_ccaa, 1, 2))
fragmentacion_ccaa <- election_tidy_with_siglas |>
group_by(codigo_ccaa, Partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE),
censo_total = sum(censo, na.rm = TRUE),
.groups = "drop") |>
group_by(codigo_ccaa) |>
reframe(
indice_herfindahl = sum((votos_totales / sum(votos_totales, na.rm = TRUE))^2, na.rm = TRUE),
censo_total = unique(censo_total)
)
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |> filter(!is.na(indice_herfindahl)),
aes(label = sprintf( indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl ",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
election_tidy_with_siglas <- election_tidy_with_siglas |>
mutate(codigo_ccaa = substr(codigo_ccaa, 1, 2))
# Calcular el índice de Herfindahl por comunidad autónoma
fragmentacion_ccaa <- election_tidy_with_siglas |>
group_by(codigo_ccaa, Partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), censo_total = sum(censo, na.rm = TRUE), .groups = "drop") |>
group_by(codigo_ccaa) |>
reframe(
indice_herfindahl = sum((votos_totales / sum(votos_totales, na.rm = TRUE))^2, na.rm = TRUE),
censo_total = unique(censo_total)
)
mapa_ccaa <- mapSpain::esp_get_ccaa()
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf( indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
election_tidy_with_siglas <- election_tidy_with_siglas |>
mutate(codigo_ccaa = substr(codigo_ccaa, 1, 2))
# Calcular el índice de Herfindahl por comunidad autónoma
fragmentacion_ccaa <- election_tidy_with_siglas |>
group_by(codigo_ccaa, Partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), censo_total = sum(censo, na.rm = TRUE), .groups = "drop") |>
group_by(codigo_ccaa) |>
reframe(
indice_herfindahl = sum((votos_totales / sum(votos_totales, na.rm = TRUE))^2, na.rm = TRUE),
censo_total = unique(censo_total)
)
mapa_ccaa <- mapSpain::esp_get_ccaa()
mapa_fragmentacion_ccaa <- mapa_ccaa |>
left_join(fragmentacion_ccaa, by = c("codauto" = "codigo_ccaa"))
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Municipios en España",
subtitle = "Índice de Herfindahl (fragmentación) representado por municipios",
caption = "Datos del censo mostrados proporcionalmente con la opacidad",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
coord_sf(datum = NA) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
ggplot(mapa_fragmentacion_ccaa) +
geom_sf(aes(fill = indice_herfindahl), color = "gray90", size = 0.1) +
geom_sf_text(
data = mapa_fragmentacion_ccaa |>  filter(!is.na(indice_herfindahl)),
aes(label = sprintf("%.2f", indice_herfindahl)),
size = 2,
color = "black",
fontface = "bold"
) +
scale_fill_gradientn(
colors = c("lightcoral", "gold", "forestgreen"),
name = "Fragmentación",
limits = c(0, 1),
labels = scales::percent_format(accuracy = 1)
) +
labs(
title = "Fragmentación del Voto por Comunidades Autonomas en España",
subtitle = "Índice de Herfindahl",
fill = "Fragmentación (Herfindahl)"
) +
coord_sf(datum = NA) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank()
)
>>>>>>> Stashed changes
=======
ganadores_mun<-election_tidy_with_siglas |>
filter(anno==2019) |>
mutate("key"=glue("{codigo_provincia}-{codigo_municipio}")) |>
group_by(key) |>
drop_na(votos) |>
slice_max(votos)
ganadores_mun<-  ganadores_mun|>
mutate("Tipo_mun"= if_else(censo>median(ganadores_mun$censo),"Urbana","Rural"))
ggplot(ganadores_mun)+
geom_bar(aes(x = siglas, fill = siglas))+
scale_fill_manual(values = colores_partidos)+
facet_wrap(~Tipo_mun)+
labs(title = "GANADORES RURALES Y URBANOS 2019",
x= "PARTIDOS",
y= "VICTORIAS")+
theme_minimal()+
theme(
legend.position = "none",  # Quitar la leyenda
strip.text = element_text(face = "bold", size = 12),  # Estilo de los títulos de las facetas
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Estilo del título
plot.subtitle = element_text(size = 12, hjust = 0.5), # Estilo del subtítulo
axis.text = element_text(size = 10, angle = 30)
)+
guides(alpha = "none")
>>>>>>> fa6006c4769fd1dea60119d9eb8d34144721a5be
